from pwn import *

class LCG:
	a = 25214903917
	b = 11
	m = 2 ** 48 - 1
	state = 0

	def __init__(self, seed):
		self.state = self.init_scamble(seed)

	def init_scamble(self, seed):
		# seed xor a (mod m)
		result = (seed ^ self.a) & self.m
		print("init scamble: " + str(result))
		return result

	# hier kommt genau das gleiche raus wie mit rng.nextInt()
	# man kann davon ausgehen, dass 31 hier als parameter rein gegeben wird
	def next(self, bits):
		# new state = a * old_state + b (mod m)
		self.state = (self.a * self.state + self.b) & self.m

		# Returns self.state with the bits shifted to the right by 48-bits (bits=31) = 17 places.
		# This is the same as dividing the self.state by 2**17.
		rightshift = (self.state >> 48 - bits)

		# Returns 1 with the bits shifted to the left by 31 places (and new bits on the right-hand-side are zeros). This is the same as multiplying 1 by 2**31.
		# substracts 1 from the result
		leftshift = ((1 << 31) - 1)

		# returns the result of the logical and-operation between the two
		return rightshift & leftshift

	def nextInt(self):
		return self.next(31)


conn = remote("vuln.redrocket.club",4334)

# send numbers 10 times
# get 10 states in total
states = []
for i in range (0,2):
    output = conn.recvuntil("?")

    number = 8
    conn.sendline(str(number))

    # trash
    conn.recvline()
    # WRONG ... magic number
    output = conn.recvline()

    # get magic number
    output = output.decode()
    #print(output)
    magic_number = output[29:39]

    #print(str(magic_number))
    states.append(int(magic_number))
    #print(states[i])
    #print(i)

# print states
for i in range (0,len(states)):
    print(str(i) + ": " + str(states[i]))

print("++++++++++ LCG exploit start +++++++++++\n")
# create lcg
seed = 12345678
lcg = LCG(seed)

# take one of the states and set the lcg state to this
first_mag_num = states[0]
secon_mag_num = states[1]


print("Start: magical number = " + str(first_mag_num))
# 1. reverse rightshift by 17 bits
input = first_mag_num << 17
print("reverse postprocessing: \'rightshift by 17 bits\' by leftshifiting it 17 bit: " + str(input))

# (1<<31) - 1
const = 2147483647

for i in range(2**17):
	# 2. add i to upcount number
	attempt = input + i
	# print("added brute forced number: " + str(attempt))

	# calc second state with attempt
	new_state = (lcg.a * attempt + lcg.b) & lcg.m
	# do postprocessing
	new_magic_number = (new_state >> 17) & const

	if(new_magic_number == secon_mag_num):
		print("found a match")
		# calculate exploited state
		exploited_state = (lcg.a * new_state + lcg.b) & lcg.m
		# do postprocessing
		exploited_mag_number = (exploited_state >> 17) & const
		print("exploited state: " + str(exploited_mag_number))
		conn.sendline(str(exploited_mag_number))
		break;

conn.interactive()




